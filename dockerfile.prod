#需要确定打包方式
#打包构建镜像文件,在构建时将代码复制到镜像中

# ---------- 构建阶段 ----------
#使用官方node镜像   
FROM node:20-alpine3.19.1 AS base

#设置工作目录
WORKDIR /app

#复制package.json和package-lock.json
COPY package.json .
COPY package-lock.json .

# 安装 pnpm（如果使用）
RUN npm install -g pnpm

# 安装依赖
RUN pnpm install --production

# 安装 PM2
RUN npm install -g pm2

ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

RUN if [ "$NODE_ENV" = "production" ]; then npm install --production; else npm install; fi

COPY . .

# ---------------- 构建生产环境阶段 ----------------
FROM base AS builder
RUN if [ "$NODE_ENV" = "production" ]; then npm run build; fi

# ---------- 生产镜像 ----------
FROM node:20-alpine3.19.1

WORKDIR /app


# 复制构建阶段构建好的dist目录
COPY --from=builder /app/dist ./dist

# 复制package.json和package-lock.json
COPY package.json .
COPY package-lock.json .

RUN pnpm install --production && pnpm install -g pm2

# 复制环境变量
COPY .env.production .env

# 暴露端口
EXPOSE 3000

# 启动应用
CMD ["pm2-runtime", "start", "dist/index.js"]

#在docker中直接运行命令
#docker build --target production --build-arg NODE_ENV=production -t my-app:prod .

# ---------- 开发镜像 ----------
FROM node:20-alpine3.19.1

WORKDIR /app


# 复制整个项目
COPY --from=base /app /app

# 复制package.json和package-lock.json
COPY package.json .
COPY package-lock.json .

RUN pnpm install ts-node && pnpm install -g pm2 
# 复制环境变量
COPY .env.development .env

# 暴露端口
EXPOSE 3000

# 启动应用

CMD ["pm2-runtime", "src/index.ts", "--watch"]


#docker build --target development --build-arg NODE_ENV=development -t my-app:dev .
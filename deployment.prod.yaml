apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: app
  template:
    metadata:
      labels:
        app: app
      spec:
      containers:
        - name: app                        #容器名称
          image: app:prod                   #镜像名称
          imagePullPolicy: IfNotPresent    #镜像拉取策略
          ports:
            - containerPort: 3000          #容器端口
          env:
            - name: NODE_ENV
              value: production
          volumeMounts:
            - name: app-src
              mountPath: /app
            - name: env-file
              mountPath: /app/.env
              subPath: .env
          resources:                      # 资源限制
            limits:
              cpu: "500m"                 # 最大 CPU 限制 0.5 核
              memory: "512Mi"             # 最大内存限制 512Mi
            requests:
              cpu: "200m"                 # 最小请求 CPU 0.2 核
              memory: "256Mi"             # 最小请求内存 256Mi
          livenessProbe:                  # 存活检查配置
            httpGet:
              path: /health               # 检查路径
              port: 3000                  # 检查端口
            initialDelaySeconds: 10       # 启动后延迟多少秒开始第一次检查
            periodSeconds: 5              # 每隔多少秒检查一次
      volumes:
        - name: app-src
          hostPath:
            path: ./dist
        - name: env-file
          hostPath:
            path: .env.production


---
#定义如何访问应用，比如应用对外暴露哪个端口，负载均衡，DNS 服务 负责:对外暴露和流量转发
apiVersion: v1
kind: Service
metadata:
  name: my-app-service  # Service 名称
spec:
  type: NodePort        # Service 类型，NodePort 对外暴露
  selector:
    app: app         # 选择匹配的 Pod
  ports:
    - protocol: TCP
      port: 80          # Service 端口
      targetPort: 3000  # 转发到 Pod 内部容器的端口
      nodePort: 30080   # 节点暴露的端口（30000-32767）